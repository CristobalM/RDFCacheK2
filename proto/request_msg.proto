syntax = "proto3";
import "message_type.proto";
import "sparql_tree.proto";
package proto_msg;


option java_package = "com.github.cristobalm.RDFEWK2C.proto";
option java_outer_classname = "RequestMsg";

message CacheRequest{
    MessageType request_type = 1;

    oneof request {
        ConnectionEndRequest connection_end_request = 2;
        CacheRunQueryAlgebra cache_run_query_algebra = 3;
        ReceiveRemainingResult receive_remaining_result = 4;
        CacheRequestSeparatePredicates cache_request_separate_predicates = 5;
        DoneWithPredicatesNotify done_with_predicates_notify = 6;
        StreamRequestTriplePattern stream_request_triple_pattern = 7;
        StreamContinueTriplePattern stream_continue_triple_pattern = 8;
        CacheRequestStartUpdateTriples cache_request_start_update_triples = 9;
        CacheDoneUpdateTriples cache_done_update_triples = 10;
        TriplesUpdateBatch triples_update_batch = 11;
        RequestBGPJoin bgp_join = 12;
        RequestContinueBGPJoin continue_bgp_join = 13;
    }
}


message TriplesUpdateBatch{
    int32 update_id = 1;
    repeated TripleNodeIdEnc triples_to_add = 2;
    repeated TripleNodeIdEnc triples_to_delete = 3;
}


message NodePattern {
    oneof node_pattern {
        uint64 concrete_node_id = 1;
        string variable_name = 2;
    }
}

message TriplePattern {
    NodePattern subject_node_pattern = 1;
    NodePattern predicate_node_pattern = 2;
    NodePattern object_node_pattern = 3;
}

message RequestBGPJoin{
    repeated string variable_names = 1;
    repeated TriplePattern triple_patterns = 2;
}

message RequestContinueBGPJoin{
    uint32 channel_id = 1;
}

message CacheDoneUpdateTriples{
    int32 update_id = 1;
}

message CacheRequestStartUpdateTriples{
}

message StreamContinueTriplePattern{
    int32 channel_id = 1;
    int32 pattern_channel_id = 2;
}

message StreamRequestTriplePattern{
    int32 channel_id = 1;
    TripleNodeIdEnc triple_node = 2;
}

message DoneWithPredicatesNotify{
    int32 channel_id = 1;
}

message CacheRequestSeparatePredicates{
    repeated NodeIdEncoded predicates = 1;
}


message ReceiveRemainingResult{
    int32 id = 1;
}

message ConnectionEndRequest{
    bool end = 1;
}

message CacheRunQueryAlgebra{
    SparqlTree sparql_tree = 1;
}

message SubjectObjectPair{
    uint64 subject = 1;
    uint64 object = 2;
}

message RDFTriple {
    uint64 subject = 1;
    uint64 predicate = 2;
    uint64 object = 3;
}

message TripleIds {
    int64 subject = 1;
    int64 predicate = 2;
    int64 object = 3;
}
