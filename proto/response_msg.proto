syntax = "proto3";
import "message_type.proto";
import "sparql_tree.proto";

package proto_msg;


option java_package = "com.github.cristobalm.RDFEWK2C.proto";
option java_outer_classname = "ResponseMsg";

message CacheResponse{
    MessageType response_type = 1;

    oneof response {
        ConnectionEndResponse connection_end_response = 2;
        InvalidQueryResponse invalid_query_response = 3;
        ResultTablePartResponse result_table_part_response = 4;
        ErrorResponse error_response = 5;
        ExtractSeparatePredicatesResponse extract_separate_predicates_response = 6;
        StreamOfTriplesMatchingPatternResponse stream_of_triples_matching_pattern_response = 7;
        AckDoneWithChannel ack_done_with_channel = 8;
    }
}
message AckDoneWithChannel {}

message StreamOfTriplesMatchingPatternResponse{
    int32 channel_id = 1;
    int32 pattern_channel_id = 2;
    repeated string variables = 3; // Only on first response giving the order of the matching values
    repeated MatchingValues matching_values = 4;
    bool last_result = 5;
}

message MatchingValues{
    repeated RDFTerm single_match = 1;
}

message ExtractSeparatePredicatesResponse{
    int32 id = 1;
    repeated RDFTerm available_predicates = 2;
}

message ResultTablePartResponse{
    int32 id = 1;
    bool last_part = 2;
    repeated string headers = 3; // optional
    repeated QueryResultRow rows = 4;
}

message QueryResultRow{
    repeated QueryResultValue row_values = 1;
}

message QueryResultValue{
    string value = 1;
    TermType term_type = 2;
}


message ErrorResponse{}


message InvalidQueryResponse{}

message ConnectionEndResponse{
    bool end = 1;
}


message QueryResultKeyValuePair {
    uint64 key = 1;
    string value = 2;
    TermType type = 3;
}
